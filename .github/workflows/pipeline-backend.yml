name: BSN Backend Pipeline

on:
  push:
    branches:
      - main
    paths:
      - Backend/**
      - docker/backend/**
      - 'docker-compose.yml'
      - '.github/workflows/*-backend.yml'
jobs:
  compile:
    runs-on:  ubuntu-22.04
    name: Compile Backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
            fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'corretto'

      - name: Compile Backend
        run: |
          cd Backend
          ./mvnw clean compile 
          


#  unit-test:
#    runs-on: ubuntu-22.04
#    name: Run Unit Tests
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#        with:
#            fetch-depth: 0
#
#      - name: Set up JDK
#        uses: actions/setup-java@v4
#        with:
#          java-version: 17
#          distribution: 'corretto'
#
#      - name: Run Unit Tests
#        run: |
#          cd Backend
#          ./mvnw clean test

  build:
    runs-on: ubuntu-22.04
    name: Build Backend
    needs: compile
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
            fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'corretto'

      - name: Build Backend
        run: |
          cd Backend
          ./mvnw clean package -DskipTests

  build-image:
    runs-on: ubuntu-22.04
    name: Build Docker Image
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
            fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'corretto'

      - name: Build Backend
        run: |
          cd Backend
          ./mvnw clean package -DskipTests

      - name: Extract project version
        id: extract_version
        run: |
            cd Backend
            echo "VERSION=$(./mvnw -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)" >> $GITHUB_OUTPUT

#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_TOKEN}}

      - name: Debug Docker username
        run: |
          echo "Username length: ${#DOCKERHUB_USERNAME}"
          echo "Username (first 3 chars): ${DOCKERHUB_USERNAME:0:3}"
          if [ -z "$DOCKERHUB_USERNAME" ]; then
            echo "ERROR: Username is empty!"
          else
            echo "Username is set"
          fi
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}

#      - name: Set Docker tags
#        id: docker_tags
#        run: |
#          echo "TAG1=${{ secrets.DOCKERHUB_USERNAME }}/bsn-api:${{ steps.extract_version.outputs.VERSION }}" >> $GITHUB_OUTPUT
#          echo "TAG2=${{ secrets.DOCKERHUB_USERNAME }}/bsn-api:latest" >> $GITHUB_OUTPUT

      - name: Build and push to Docker Hub
        uses: docker/build-push-action@v4
        with:
          context: Backend
          file: docker/backend/Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            wakil026/bsn-api:${{ steps.extract_version.outputs.VERSION }}
            wakil026/bsn-api:latest
          build-args: |
            PROFILE=dev
            APP_VERSION=${{ steps.extract_version.outputs.VERSION }}



#  deploy:
#    name: Deploy Backend
#    runs-on: ubuntu-22.04
#    needs: build-image
#    steps:
#      - name: Setup SSH
#        run: |
#          mkdir -p ~/.ssh
#          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
#          chmod 600 ~/.ssh/id_rsa
#          ssh-keyscan -H ${{ secrets.VPS_IP }} >> ~/.ssh/known_hosts
#
#      - name: Create deployment folder
#        run: ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }} "mkdir -p ci-cd"
#
#      - name: Copy docker-compose file
#        run: scp docker-compose.yml ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }}:ci-cd/
#
#      - name: Set ENV variable and deploy
#        run: |
#          ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }} <<EOF
#            export EMAIL_HOST_NAME=${{ secrets.EMAIL_HOST_NAME }}
#            export EMAIL_USER_NAME=${{ secrets.EMAIL_USER_NAME }}
#            export EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}
#            cd ci-cd
#            sudo docker-compose -f docker-compose.yml pull -q
#            sudo docker-compose -f docker-compose.yml up -d
#          EOF

#  deploy:
#    name: Deploy Backend
#    runs-on: ubuntu-22.04
#    needs: build-image
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Setup SSH
#        run: |
#          mkdir -p ~/.ssh
#          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
#          chmod 600 ~/.ssh/id_rsa
#          # Add VPS to known hosts
#          ssh-keyscan -H ${{ secrets.VPS_IP }} >> ~/.ssh/known_hosts 2>/dev/null || true
##          # Test SSH connection (fix the quotes)
##          ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }} "echo SSH connection successful"
#
#      - name: Create deployment folder
#        run: |
#          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }} <<EOF
#          mkdir -p ~/ci-cd
#          EOF
#
#      - name: Debug - Check local file
#        run: |
#          echo "=== Local docker-compose.yml ==="
#          ls -la docker-compose.yml
#          echo "First few lines:"
#          head -3 docker-compose.yml
#
#      - name: Copy docker-compose file
#        run: |
#          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }} <<EOF
#          cat > ~/ci-cd/docker-compose.yml << 'COMPOSE_EOF'
#          $(cat docker-compose.yml)
#          COMPOSE_EOF
#          EOF
#
#      - name: Verify file copied
#        run: |
#          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }} << EOF
#          echo "=== VPS ci-cd directory ==="
#          pwd
#          ls -la
#          ls -la ci-cd/
#          echo "=== Checking for docker-compose.yml ==="
#          if [ -f ci-cd/docker-compose.yml ]; then
#              echo "✅ File exists!"
#              wc -l ci-cd/docker-compose.yml
#          else
#              echo "❌ File missing!"
#              echo "Let's check other possible locations:"
#              find . -name "docker-compose.yml" 2>/dev/null || echo "No docker-compose.yml found anywhere"
#          fi
#          EOF
#
#      - name: Set ENV variable and deploy
#        run: |
#          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }} <<EOF
#            export EMAIL_HOST_NAME=${{ secrets.EMAIL_HOST_NAME }}
#            export EMAIL_USER_NAME=${{ secrets.EMAIL_USER_NAME }}
#            export EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}
#            cd ci-cd
#            sudo docker-compose -f docker-compose.yml pull -q
#            sudo docker-compose -f docker-compose.yml up -d
#          EOF
#  deploy:
#    name: Deploy Backend
#    runs-on: ubuntu-22.04
#    needs: build-image
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Setup SSH
#        run: |
#          mkdir -p ~/.ssh
#          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
#          chmod 600 ~/.ssh/id_rsa
#          ssh-keyscan -H ${{ secrets.VPS_IP }} >> ~/.ssh/known_hosts
#
#      - name: Test SSH connection
#        run: ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }} pwd
#
#      - name: Create deployment folder
#        run: |
#          ssh -o StrictHostKeyChecking=no ${VPS_USER}@${VPS_HOST} "mkdir -p ~/ci-cd"
#        env:
#          VPS_USER: ${{ secrets.VPS_USERNAME }}
#          VPS_HOST: ${{ secrets.VPS_IP }}
#
#      - name: Verify folder created
#        run: ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }} 'ls -la ~/ci-cd'
#
#      - name: Copy docker-compose file
#        run: scp -o StrictHostKeyChecking=no docker-compose.yml ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }}:~/ci-cd/
#
#      - name: Verify file copied
#        run: ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }} 'ls -la ~/ci-cd/'
#
#      - name: Check docker-compose
#        run: ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }} 'which docker-compose || echo "docker-compose not found"'
#
#      - name: Deploy application
#        run: ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }} 'cd ~/ci-cd && sudo docker-compose up -d'
  deploy:
    name: Deploy Backend
    runs-on: ubuntu-22.04
    needs: build-image
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          # Add VPS to known hosts
          ssh-keyscan -H ${{ secrets.VPS_IP }} >> ~/.ssh/known_hosts 2>/dev/null || true
      #          # Test SSH connection (fix the quotes)
      #          ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }} "echo SSH connection successful"

      - name: Create deployment folder
        run: |
          ssh -o StrictHostKeyChecking=no ${VPS_USER}@${VPS_HOST} <<EOF
          mkdir -p ~/ci-cd
          EOF
        env:
          VPS_USER: ${{ secrets.VPS_USERNAME }}
          VPS_HOST: ${{ secrets.VPS_IP }}

      - name: Debug - Check local file
        run: |
          echo "=== Local docker-compose.yml ==="
          ls -la docker-compose.yml
          echo "First few lines:"
          head -3 docker-compose.yml

      - name: Copy docker-compose file
        run: |
          ssh -o StrictHostKeyChecking=no ${VPS_USER}@${VPS_HOST} <<EOF
          cat > ~/ci-cd/docker-compose.yml << 'COMPOSE_EOF'
          $(cat docker-compose.yml)
          COMPOSE_EOF
          EOF
        env:
          VPS_USER: ${{ secrets.VPS_USERNAME }}
          VPS_HOST: ${{ secrets.VPS_IP }}

      - name: Verify file copied
        run: |
          ssh -o StrictHostKeyChecking=no ${VPS_USER}@${VPS_HOST} << EOF
          echo "=== VPS ci-cd directory ==="
          pwd
          ls -la
          ls -la ci-cd/
          echo "=== Checking for docker-compose.yml ==="
          if [ -f ci-cd/docker-compose.yml ]; then
              echo "✅ File exists!"
              wc -l ci-cd/docker-compose.yml
          else
              echo "❌ File missing!"
              echo "Let's check other possible locations:"
              find . -name "docker-compose.yml" 2>/dev/null || echo "No docker-compose.yml found anywhere"
          fi
          EOF
        env:
          VPS_USER: ${{ secrets.VPS_USERNAME }}
          VPS_HOST: ${{ secrets.VPS_IP }}

      - name: Clean up existing containers
        run: |
          ssh -o StrictHostKeyChecking=no ${VPS_USER}@${VPS_HOST} <<EOF
            cd ~/ci-cd
            echo "=== Stopping all containers ==="
            sudo docker-compose down || true

            echo "=== Removing problematic containers ==="
            sudo docker rm -f bsn-api || true
            sudo docker rm -f bsn-ui || true

            echo "=== Removing old images ==="
            sudo docker rmi wakil026/bsn-api:latest || true

            echo "=== Pruning system ==="
            sudo docker system prune -f

            echo "=== Current containers ==="
            sudo docker ps -a
          EOF
        env:
          VPS_USER: ${{ secrets.VPS_USERNAME }}
          VPS_HOST: ${{ secrets.VPS_IP }}

      - name: Deploy application (clean start)
        run: |
          ssh -o StrictHostKeyChecking=no ${VPS_USER}@${VPS_HOST} <<EOF
            export EMAIL_HOST_NAME=${EMAIL_HOST_NAME}
            export EMAIL_USER_NAME=${EMAIL_USER_NAME}
            export EMAIL_PASSWORD=${EMAIL_PASSWORD}
            cd ~/ci-cd
            
            echo "=== Creating .env file ==="
            cat > .env << 'ENV_EOF'
            EMAIL_HOST_NAME=${EMAIL_HOST_NAME}
            EMAIL_USER_NAME=${EMAIL_USER_NAME}
            EMAIL_PASSWORD=${EMAIL_PASSWORD}
            ENV_EOF
            
            echo "=== Showing .env contents ==="
            cat .env

            echo "=== Pulling fresh images ==="
            sudo -E docker-compose pull

            echo "=== Starting containers ==="
            sudo -E docker-compose up -d --force-recreate

            echo "=== Final status ==="
            sudo docker ps
          
            echo "=== Check environment variables ==="
            sudo docker exec bsn-api env | grep EMAIL || echo "No EMAIL variables found"
          EOF
        env:
          VPS_USER: ${{ secrets.VPS_USERNAME }}
          VPS_HOST: ${{ secrets.VPS_IP }}
          EMAIL_HOST_NAME: ${{ secrets.EMAIL_HOST_NAME }}
          EMAIL_USER_NAME: ${{ secrets.EMAIL_USER_NAME }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}